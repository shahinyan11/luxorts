// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Email component matches snapshot 1`] = `
<ContextProvider
  value={
    Object {
      "dirty": true,
      "handleSubmit": [MockFunction],
      "initialValues": Object {
        "email": "test@mail.com",
        "password": "",
      },
      "isValid": true,
      "onSubmit": [Function],
      "resetForm": [MockFunction],
      "setFieldTouched": [MockFunction],
      "setFieldValue": [MockFunction],
      "setValues": [MockFunction],
      "validateForm": [MockFunction],
      "validationSchema": ObjectSchema {
        "_blacklist": ReferenceSet {
          "list": Set {},
          "refs": Map {},
        },
        "_blacklistError": undefined,
        "_excludedEdges": Array [],
        "_nodes": Array [
          "password",
          "email",
        ],
        "_sortErrors": [Function],
        "_typeError": [Function],
        "_whitelist": ReferenceSet {
          "list": Set {},
          "refs": Map {},
        },
        "_whitelistError": undefined,
        "conditions": Array [],
        "deps": Array [],
        "exclusiveTests": Object {},
        "fields": Object {
          "email": StringSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_mutate": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {
              "email": false,
              "max": true,
              "required": true,
            },
            "spec": Object {
              "abortEarly": true,
              "nullable": false,
              "presence": "required",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "password": StringSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_mutate": undefined,
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {
              "max": true,
              "min": true,
              "required": true,
            },
            "spec": Object {
              "abortEarly": true,
              "nullable": false,
              "presence": "required",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
        },
        "spec": Object {
          "abortEarly": true,
          "nullable": false,
          "presence": "optional",
          "recursive": true,
          "strict": false,
          "strip": false,
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
        "type": "object",
      },
      "values": Object {},
    }
  }
>
  <FieldWrapper
    changeMode={true}
    description={
      Object {
        "id": "personalInformation.email.description",
      }
    }
    fieldNames={null}
    hideButtons={false}
    isLoading={false}
    label={
      Object {
        "id": "shared.email",
      }
    }
    value="test@mail.com"
  >
    <InputField
      asComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "Group": [Function],
          "Password": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "action": "click",
              "iconRender": [Function],
              "visibilityToggle": true,
            },
            "render": [Function],
          },
          "Search": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "TextArea": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "render": [Function],
        }
      }
      label={
        Object {
          "id": "shared.email",
        }
      }
      name="email"
      numbersOnly={false}
      type="email"
      withFormItem={true}
    />
    <PasswordField
      label={
        Object {
          "id": "shared.currentPassword",
        }
      }
      name="password"
      withProgress={false}
    />
  </FieldWrapper>
</ContextProvider>
`;
