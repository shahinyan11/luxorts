// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InviteFriends component matches snapshot 1`] = `
<div
  className="personal-information"
>
  <Breadcrumb />
  <h1
    className="text-display-2 mb-lg-64 mb-32"
  >
    <Memo(FormattedMessage)
      id="shared.inviteFriends"
    />
  </h1>
  <div
    className="personal-information__content"
  >
    <div
      className="personal-information__user"
    >
      <div
        className="personal-information__item mb-24"
      >
        <ForwardRef(InternalForm)
          layout="vertical"
          size="large"
        >
          <ContextProvider
            value={
              Object {
                "dirty": true,
                "enableReinitialize": true,
                "handleSubmit": [MockFunction],
                "initialValues": Object {
                  "userInvitations": Array [],
                },
                "isValid": true,
                "onSubmit": [Function],
                "resetForm": [MockFunction],
                "setFieldTouched": [MockFunction],
                "setFieldValue": [MockFunction],
                "setValues": [MockFunction],
                "validateForm": [MockFunction],
                "validationSchema": ObjectSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_excludedEdges": Array [],
                  "_nodes": Array [
                    "userInvitations",
                  ],
                  "_sortErrors": [Function],
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [],
                  "deps": Array [],
                  "exclusiveTests": Object {},
                  "fields": Object {
                    "userInvitations": ArraySchema {
                      "_blacklist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_blacklistError": undefined,
                      "_typeError": [Function],
                      "_whitelist": ReferenceSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_whitelistError": undefined,
                      "conditions": Array [],
                      "deps": Array [],
                      "exclusiveTests": Object {},
                      "innerType": StringSchema {
                        "_blacklist": ReferenceSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_blacklistError": undefined,
                        "_typeError": [Function],
                        "_whitelist": ReferenceSet {
                          "list": Set {},
                          "refs": Map {},
                        },
                        "_whitelistError": undefined,
                        "conditions": Array [],
                        "deps": Array [],
                        "exclusiveTests": Object {
                          "email": false,
                          "max": true,
                        },
                        "spec": Object {
                          "abortEarly": true,
                          "nullable": false,
                          "presence": "optional",
                          "recursive": true,
                          "strict": false,
                          "strip": false,
                        },
                        "tests": Array [
                          [Function],
                          [Function],
                        ],
                        "transforms": Array [
                          [Function],
                        ],
                        "type": "string",
                      },
                      "spec": Object {
                        "abortEarly": true,
                        "nullable": false,
                        "presence": "optional",
                        "recursive": true,
                        "strict": false,
                        "strip": false,
                      },
                      "tests": Array [],
                      "transforms": Array [
                        [Function],
                      ],
                      "type": "array",
                    },
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "object",
                },
                "values": Object {},
              }
            }
          >
            <SelectField
              label={
                Object {
                  "id": "shared.email",
                }
              }
              mode="tags"
              name="userInvitations"
              optionComponent={[Function]}
              options={Array []}
              placeholder={
                Object {
                  "id": "shared.enterEmail",
                }
              }
            />
            <GradientButton
              addonAfter={null}
              addonBefore={null}
              className="min-width-140 mb-24"
              disabled={false}
              loading={false}
              onClick={[MockFunction]}
              text={
                Object {
                  "id": "shared.sendInvite",
                }
              }
              variant="primary"
            />
          </ContextProvider>
        </ForwardRef(InternalForm)>
      </div>
      <p
        className="personal-information__caption text-body mb-24"
      >
        <Memo(FormattedMessage)
          id="shared.invited"
          values={
            Object {
              "count": 1,
            }
          }
        />
      </p>
      <Memo(InviteItem)
        email="12@mail.ru"
        id="52080e19-c5e0-45bb-af58-edbbe70e78fa"
        key="52080e19-c5e0-45bb-af58-edbbe70e78fa"
        resendable={true}
        status="pending"
      />
    </div>
    <PageInfo
      description={
        Object {
          "id": "inviteFriends.info.description",
        }
      }
      icon={
        <SvgIcon
          className="personal-information__icon"
          icon="guests"
        />
      }
      title={
        Object {
          "id": "shared.inviteFriends",
        }
      }
    />
  </div>
</div>
`;
